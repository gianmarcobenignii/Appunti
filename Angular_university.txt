courses;
courses$             ---> $specifica che è un observablers


data ={
    title = "godo"
}

<img src... alt="CACS"> ---> nel caso in cui l'immagine non fosse disponibile, uscirà il messaggio  CACS
<h1>welcome to {{data.title}}</h1>
<input class ="demo" [value] ="data.title">

per inserire nell'input il title, bisogna inserire le [] attorno a value




Il codice sotto crea una barra dove se scriviamo, cambia automaticamente il titolo:

  onKeyUp(newTitle: string) {
    this.data.title = newTitle;
  }

      <input  class="ciao"(keyup)="onKeyUp(titleInput.value)" 
      [value]="data.title"  #titleInput/>
      ________________________________________________________________________________________________
INPUT E OUTPUT
   APP-COMPONENT-TS  @Input() course: Course;
                     @Output() courseSelected = new EventEmitter<Course>();

 
                    onCourseView() {
                    console.log("card component - button clicked ...");     output
                    this.courseSelected.emit(this.course);
                    }


  APP- HTML  <coruse-card (courseSelected)="oncourseSelected($event)" [course]="coreCourse"></coruse-card>
  ______________________________________________________________________________________________________________________
  
  .course-card.beginner{
  background:lightsalmon; 

}

  <div class="course-card>
  [ngClass]="'beginner'";  --> ulitizzato maggiormente per condizioni css
  </div>


 [ngClass]="['beginner', course-card]";   --> passo come array, il risultato è uguale a sopra

  [ngClass]="{'beginner':true, 'course-card':true}";>  -->passo come oggetto, il risultato è uguale a sopra

  [ngClass] ="cardClasses()"possiamo creare anche una funzione passandogli la funzione di oggeti sopra citata
  ________________________________________________________________________________________________

  [style.text-decoration]="'underline'"  --> rende il testo sottolineato.
  Possiamo sotituirlo con:
  [ngStyle] ="{'text-decoration' : 'underline'}"
  ________________________________________________________________________________________________
    <div class="course-category" [ngSwitch]="course.category">
    <div class="category" *ngSwitchCase="'BEGINNER'">Beginner</div>
    Inserisce la categoria BEGINNER SOLO a quei corsi che hanno category = beginner, le altre le salta

    se una classe non ha la category o la category è null possiamo:
    ________________________________________________________________________________________________
CREAZIONE RICHIESTA HTTP
 <course-card *ngFor="let course of courses"

      constructor(private http: HttpClient) {

  }

  ngOnInit() {
    this.http.get('/api/courses')
      .subscribe(
        courses => this.courses = courses);
  }


  <div class="courses"> <!--Nella div a sx posso inserire *ngIf="courses$ | async as PORCODIO">
  e nel for sotto posso inserire let course of PORCODIO.
Il risultato del codice scritto ora non cambia-->

    <course-card *ngFor="let course of (courses$ | async) "
this.courses$ = this.http.get<Course[]>('/api/courses', { params });

Tra il subscribe "normale e quello con il 
  courses$: Observable<Course[]>;
  cambia che nel secondo caso non devo preoccuparmi delle disiscrizioni




  ________________________________________________________________________________________________

  promise e osservable

  sono due metodi asincroni

  promise --> callback, ritorna SEMPRE un valore che può essere true o false, con un solo valore, non posso intercettare il messaggio.
  Alla risposta posso fare 3 azioni.
  1) .then() risposta buona, se la risposta è buona chiudo lo spinner 
  2) .catch() errore
  3) .finally() fai sia se la risposta è buona che non, usato sia se devo usare il then che catch
  

  observable --> message, faccio una subscription e posso ottenere più messaggi nel tempo, NON si riceve SEMPRE un valore.
  In observable possso intercettare il messaggio

  Azioni:

  .subscribe()
  .pipe(), posso intercettare e lavorare prima che il messaggio arrivi 
        dentro al pipe ci può essere il map(), tap(), take(1) --> vuole un parametro di riferimento, uando i messaggi ricevono il parametro di riferimento, il subscribe viene chiuso, 
         takeuntil(M)finchè non ottiene un dato messaggio è uguale al parametro, se è così chiudi,
         .catchError()
         .complete() uanto un observable viene completata


         Promise --> comunicazione 1 a 1


         Observable -->tiene d'occhio tutte le sottoscrizioni. Se non chiudo il subscribe la richeista rimane aperta (da non fare)
________________________________________________________________________________________________

Websocket fino al 2009 era client server, ossia richiesta risposta ecc

richiesta --->  
                SERVER
risposta <---  


ora
client -----> server
      <------ server

      
